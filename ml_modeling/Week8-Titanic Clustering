{"cells":[{"cell_type":"markdown","metadata":{"id":"o0qx7qClReYh"},"source":["# Setup"]},{"cell_type":"markdown","metadata":{"id":"vOBmZkNkReYh"},"source":["First, let's import a few common modules, ensure MatplotLib plots figures inline and prepare a function to save the figures. We also check that Python 3.5 or later is installed (although Python 2.x may work, it is deprecated so we strongly recommend you use Python 3 instead), as well as Scikit-Learn ≥0.20."]},{"cell_type":"code","execution_count":1,"metadata":{"id":"EW8kHKAiReYh","executionInfo":{"status":"ok","timestamp":1644929521609,"user_tz":300,"elapsed":675,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[],"source":["# Python ≥3.5 is required\n","import sys\n","assert sys.version_info >= (3, 5)\n","\n","# Is this notebook running on Colab or Kaggle?\n","IS_COLAB = \"google.colab\" in sys.modules\n","IS_KAGGLE = \"kaggle_secrets\" in sys.modules\n","\n","# Scikit-Learn ≥0.20 is required\n","import sklearn\n","assert sklearn.__version__ >= \"0.20\"\n","\n","# Common imports\n","import numpy as np\n","import os\n","from sklearn.model_selection import GridSearchCV\n","# to make this notebook's output stable across runs\n","np.random.seed(42)\n","\n","# To plot pretty figures\n","%matplotlib inline\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","mpl.rc('axes', labelsize=14)\n","mpl.rc('xtick', labelsize=12)\n","mpl.rc('ytick', labelsize=12)\n","\n","# Where to save the figures\n","PROJECT_ROOT_DIR = \".\"\n","CHAPTER_ID = \"classification\"\n","IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID)\n","os.makedirs(IMAGES_PATH, exist_ok=True)\n","\n","def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n","    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n","    print(\"Saving figure\", fig_id)\n","    if tight_layout:\n","        plt.tight_layout()\n","    plt.savefig(path, format=fig_extension, dpi=resolution)"]},{"cell_type":"code","source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import seaborn as sns\n","\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.svm import SVC\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import GradientBoostingClassifier\n","from xgboost import XGBClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.naive_bayes import BernoulliNB\n","from sklearn.linear_model import SGDClassifier\n","from sklearn.dummy import DummyClassifier\n","\n","from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score\n","from sklearn.metrics import confusion_matrix,classification_report"],"metadata":{"id":"T1sQLCb-mUUt","executionInfo":{"status":"ok","timestamp":1644929522019,"user_tz":300,"elapsed":416,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9rsR_zwCReY0"},"source":["### **Tackle** the Titanic dataset\n","\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"b5WFsOLmReY0"},"source":["The goal is to predict whether or not a passenger survived based on attributes such as their age, sex, passenger class, where they embarked and so on."]},{"cell_type":"markdown","metadata":{"id":"Mq3v99nxReY0"},"source":["Let's fetch the data and load it:"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"F2N2v4Q0ReY0","executionInfo":{"status":"ok","timestamp":1644929522923,"user_tz":300,"elapsed":907,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"09ba892b-3a0b-4036-fde1-f8fb447202de"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading train.csv\n","Downloading test.csv\n"]}],"source":["import os\n","import urllib.request\n","\n","TITANIC_PATH = os.path.join(\"datasets\", \"titanic\")\n","DOWNLOAD_URL = \"https://raw.githubusercontent.com/ageron/handson-ml2/master/datasets/titanic/\"\n","\n","def fetch_titanic_data(url=DOWNLOAD_URL, path=TITANIC_PATH):\n","    if not os.path.isdir(path):\n","        os.makedirs(path)\n","    for filename in (\"train.csv\", \"test.csv\"):\n","        filepath = os.path.join(path, filename)\n","        if not os.path.isfile(filepath):\n","            print(\"Downloading\", filename)\n","            urllib.request.urlretrieve(url + filename, filepath)\n","\n","fetch_titanic_data()    "]},{"cell_type":"code","execution_count":4,"metadata":{"id":"Yr0d9hUPReY0","executionInfo":{"status":"ok","timestamp":1644929522924,"user_tz":300,"elapsed":7,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[],"source":["import pandas as pd\n","\n","def load_titanic_data(filename, titanic_path=TITANIC_PATH):\n","    csv_path = os.path.join(titanic_path, filename)\n","    return pd.read_csv(csv_path)"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"_1xiao7sReY0","executionInfo":{"status":"ok","timestamp":1644929522924,"user_tz":300,"elapsed":5,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[],"source":["train_data = load_titanic_data(\"train.csv\")\n","test_data = load_titanic_data(\"test.csv\")"]},{"cell_type":"markdown","metadata":{"id":"hiaTMH9UReY1"},"source":["The data is already split into a training set and a test set. However, the test data does *not* contain the labels: your goal is to train the best model you can using the training data, then make your predictions on the test data and upload them to Kaggle to see your final score."]},{"cell_type":"markdown","metadata":{"id":"rKlmjm-OReY1"},"source":["Let's take a peek at the top few rows of the training set:"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"sfGOnzDQReY1","outputId":"7fc1c945-203d-4b44-95ef-e9ac9f044d5b","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1644929523492,"user_tz":300,"elapsed":572,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-cab62122-c6a6-4343-92a3-44ddb2bfe1e9\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cab62122-c6a6-4343-92a3-44ddb2bfe1e9')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-cab62122-c6a6-4343-92a3-44ddb2bfe1e9 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-cab62122-c6a6-4343-92a3-44ddb2bfe1e9');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n","0            1         0       3  ...   7.2500   NaN         S\n","1            2         1       1  ...  71.2833   C85         C\n","2            3         1       3  ...   7.9250   NaN         S\n","3            4         1       1  ...  53.1000  C123         S\n","4            5         0       3  ...   8.0500   NaN         S\n","\n","[5 rows x 12 columns]"]},"metadata":{},"execution_count":6}],"source":["train_data.head()"]},{"cell_type":"markdown","metadata":{"id":"GtBqbDCEReY1"},"source":["The attributes have the following meaning:\n","* **PassengerId**: a unique identifier for each passenger\n","* **Survived**: that's the target, 0 means the passenger did not survive, while 1 means he/she survived.\n","* **Pclass**: passenger class.\n","* **Name**, **Sex**, **Age**: self-explanatory\n","* **SibSp**: how many siblings & spouses of the passenger aboard the Titanic.\n","* **Parch**: how many children & parents of the passenger aboard the Titanic.\n","* **Ticket**: ticket id\n","* **Fare**: price paid (in pounds)\n","* **Cabin**: passenger's cabin number\n","* **Embarked**: where the passenger embarked the Titanic"]},{"cell_type":"markdown","metadata":{"id":"bGpBrz1pReY1"},"source":["Let's explicitly set the `PassengerId` column as the index column:"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"2owTsDFrReY1","executionInfo":{"status":"ok","timestamp":1644929523492,"user_tz":300,"elapsed":48,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[],"source":["#train_data = train_data.set_index(\"PassengerId\")\n","#test_data = test_data.set_index(\"PassengerId\")"]},{"cell_type":"markdown","metadata":{"id":"TID1Wd8vReY1"},"source":["Let's get more info to see how much data is missing:"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"AO3UcmmeReY1","outputId":"1d341fe1-fe5c-44de-ea8c-09de9695f820","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644929523493,"user_tz":300,"elapsed":49,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     889 non-null    object \n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.7+ KB\n"]}],"source":["train_data.info()"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"gobtcQFFReY1","outputId":"c546484d-84c6-4ef7-88c6-131a35ee5116","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644929523493,"user_tz":300,"elapsed":41,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["27.0"]},"metadata":{},"execution_count":9}],"source":["train_data[train_data[\"Sex\"]==\"female\"][\"Age\"].median()"]},{"cell_type":"markdown","metadata":{"id":"_BgacK_rReY1"},"source":["Okay, the **Age**, **Cabin** and **Embarked** attributes are sometimes null (less than 891 non-null), especially the **Cabin** (77% are null). We will ignore the **Cabin** for now and focus on the rest. The **Age** attribute has about 19% null values, so we will need to decide what to do with them. Replacing null values with the median age seems reasonable. We could be a bit smarter by predicting the age based on the other columns (for example, the median age is 37 in 1st class, 29 in 2nd class and 24 in 3rd class), but we'll keep things simple and just use the overall median age."]},{"cell_type":"markdown","metadata":{"id":"h9gB37eqReY1"},"source":["The **Name** and **Ticket** attributes may have some value, but they will be a bit tricky to convert into useful numbers that a model can consume. So for now, we will ignore them."]},{"cell_type":"markdown","metadata":{"id":"046JYcVpReY1"},"source":["Let's take a look at the numerical attributes:"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"c5M2Xs0qReY2","outputId":"8e6cb37b-5d99-4458-a945-d9fcc44d713d","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1644929523493,"user_tz":300,"elapsed":34,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-3c88f38b-0a78-453c-b6aa-d286a95d6c32\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>714.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>446.000000</td>\n","      <td>0.383838</td>\n","      <td>2.308642</td>\n","      <td>29.699113</td>\n","      <td>0.523008</td>\n","      <td>0.381594</td>\n","      <td>32.204208</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>257.353842</td>\n","      <td>0.486592</td>\n","      <td>0.836071</td>\n","      <td>14.526507</td>\n","      <td>1.102743</td>\n","      <td>0.806057</td>\n","      <td>49.693429</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.416700</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>223.500000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>20.125000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>7.910400</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>446.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>28.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>14.454200</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>668.500000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>38.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>31.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>891.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>80.000000</td>\n","      <td>8.000000</td>\n","      <td>6.000000</td>\n","      <td>512.329200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c88f38b-0a78-453c-b6aa-d286a95d6c32')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3c88f38b-0a78-453c-b6aa-d286a95d6c32 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3c88f38b-0a78-453c-b6aa-d286a95d6c32');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare\n","count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000\n","mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208\n","std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429\n","min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000\n","25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400\n","50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200\n","75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000\n","max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200\n","\n","[8 rows x 7 columns]"]},"metadata":{},"execution_count":10}],"source":["train_data.describe()"]},{"cell_type":"markdown","metadata":{"id":"0oNsSRVAReY2"},"source":["* Yikes, only 38% **Survived**! 😭 That's close enough to 40%, so accuracy will be a reasonable metric to evaluate our model.\n","* The mean **Fare** was £32.20, which does not seem so expensive (but it was probably a lot of money back then).\n","* The mean **Age** was less than 30 years old."]},{"cell_type":"markdown","metadata":{"id":"eHEoE7GOReY2"},"source":["Let's check that the target is indeed 0 or 1:"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"r9dhEwZzReY2","outputId":"bf3a812b-79eb-4256-fc2c-b176b79546b5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644929523493,"user_tz":300,"elapsed":32,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    549\n","1    342\n","Name: Survived, dtype: int64"]},"metadata":{},"execution_count":11}],"source":["train_data[\"Survived\"].value_counts()"]},{"cell_type":"markdown","metadata":{"id":"Npn4szzGReY2"},"source":["Now let's take a quick look at all the categorical attributes:"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"6--HVBMBReY2","outputId":"49848aaa-76d7-430f-9bd4-4a011aad1efb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644929523493,"user_tz":300,"elapsed":26,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["3    491\n","1    216\n","2    184\n","Name: Pclass, dtype: int64"]},"metadata":{},"execution_count":12}],"source":["train_data[\"Pclass\"].value_counts()"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"3sY2GGvpReY2","outputId":"7bd7f5de-c348-454c-bb41-dffaefb45ed1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644929523493,"user_tz":300,"elapsed":22,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["male      577\n","female    314\n","Name: Sex, dtype: int64"]},"metadata":{},"execution_count":13}],"source":["train_data[\"Sex\"].value_counts()"]},{"cell_type":"markdown","source":["The Embarked attribute tells us where the passenger embarked: C=Cherbourg, Q=Queenstown, S=Southampton."],"metadata":{"id":"m05OVv3nUXOm"}},{"cell_type":"code","execution_count":14,"metadata":{"id":"O8W4uJhAReY2","outputId":"47a72bcb-4b8f-4c19-abcc-f67f43aa2b5d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644929523493,"user_tz":300,"elapsed":18,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["S    644\n","C    168\n","Q     77\n","Name: Embarked, dtype: int64"]},"metadata":{},"execution_count":14}],"source":["train_data[\"Embarked\"].value_counts()"]},{"cell_type":"markdown","source":["### **Feature Engineering**"],"metadata":{"id":"9rdQCZ_3UOAh"}},{"cell_type":"markdown","source":["Try to convert numerical attributes to categorical attributes: for example, different age groups had very different survival rates (see below), so it may help to create an age bucket category and use it instead of the age. Similarly, it may be useful to have a special category for people traveling alone since only 30% of them survived (see below)."],"metadata":{"id":"0EDmavVoUrKR"}},{"cell_type":"code","source":["train_data[\"AgeBucket\"] = train_data[\"Age\"] // 15 * 15\n","train_data[[\"AgeBucket\", \"Survived\"]].groupby(['AgeBucket']).mean()\n","\n","test_data[\"AgeBucket\"] = test_data[\"Age\"] // 15 * 15\n"],"metadata":{"id":"j7TQ1mv3UUAv","executionInfo":{"status":"ok","timestamp":1644929523494,"user_tz":300,"elapsed":15,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["train_data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kl3wvdCFtWmb","executionInfo":{"status":"ok","timestamp":1644929523494,"user_tz":300,"elapsed":14,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}},"outputId":"56c565c2-84f8-40ab-cd88-8613fed93a58"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(891, 13)"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["train_data[\"RelativesOnboard\"] = train_data[\"SibSp\"] + train_data[\"Parch\"]\n","train_data[[\"RelativesOnboard\", \"Survived\"]].groupby(['RelativesOnboard']).mean()\n","\n","test_data[\"RelativesOnboard\"] = test_data[\"SibSp\"] + test_data[\"Parch\"]\n"],"metadata":{"id":"KffRY-u1Uhih","executionInfo":{"status":"ok","timestamp":1644929523494,"user_tz":300,"elapsed":11,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":["Replace **SibSp** and **Parch** with their sum."],"metadata":{"id":"sCGh1cqgU0b3"}},{"cell_type":"code","source":["train_data['Family'] = train_data['SibSp'] + train_data['Parch'] + 1\n","test_data['Family'] = test_data['SibSp'] + test_data['Parch'] + 1"],"metadata":{"id":"ZRaGJx33UxrT","executionInfo":{"status":"ok","timestamp":1644929523494,"user_tz":300,"elapsed":10,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["train_data['Single']=train_data.Family<2\n","train_data['Small']=(train_data.Family>1)&(train_data.Family<5)\n","train_data['Medium']=(train_data.Family>4)&(train_data.Family<7)\n","train_data['Large']=train_data.Family>6\n","\n","test_data['Single']=test_data.Family<2\n","test_data['Small']=(test_data.Family>1)&(test_data.Family<5)\n","test_data['Medium']=(test_data.Family>4)&(test_data.Family<7)\n","test_data['Large']=test_data.Family>6"],"metadata":{"id":"8IxFFlQ-VEHC","executionInfo":{"status":"ok","timestamp":1644929523494,"user_tz":300,"elapsed":10,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":["  * Try to identify parts of names that correlate well with the **Survived** attribute."],"metadata":{"id":"mbs1VS8CVdG9"}},{"cell_type":"code","source":["train_data[\"Title\"] = train_data[\"Name\"].str.extract(\"([A-Z][a-z]*)\\.\", expand=False)\n","train_data['Title']=train_data['Title'].replace(['Ms','Mlle'],'Miss')\n","train_data['Title']=train_data['Title'].replace(['Mme','Countess','Lady','Dona'],'Mrs')\n","train_data['Title']=train_data['Title'].replace(['Dr','Major','Col','Sir','Rev','Jonkheer','Capt','Don'],'Mr')\n","train_data['Senior']=train_data['Age'].map(lambda s:1 if s>70 else 0)\n","\n","test_data[\"Title\"] = test_data[\"Name\"].str.extract(\"([A-Z][a-z]*)\\.\", expand=False)\n","test_data['Title']=test_data['Title'].replace(['Ms','Mlle'],'Miss')\n","test_data['Title']=test_data['Title'].replace(['Mme','Countess','Lady','Dona'],'Mrs')\n","test_data['Title']=test_data['Title'].replace(['Dr','Major','Col','Sir','Rev','Jonkheer','Capt','Don'],'Mr')\n","test_data['Senior']=test_data['Age'].map(lambda s:1 if s>70 else 0)"],"metadata":{"id":"IWIQVoYpVcAK","executionInfo":{"status":"ok","timestamp":1644929523494,"user_tz":300,"elapsed":10,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["train_data.Cabin = train_data.Cabin.fillna('U')\n","# map first letter of cabin to itself\n","train_data.Cabin = train_data.Cabin.map(lambda x: x[0])\n","train_data\n","\n","test_data.Cabin = test_data.Cabin.fillna('U')\n","# map first letter of cabin to itself\n","test_data.Cabin = test_data.Cabin.map(lambda x: x[0])\n","test_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":857},"id":"ZDi8Es8KdodA","executionInfo":{"status":"ok","timestamp":1644929523494,"user_tz":300,"elapsed":10,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}},"outputId":"106ce413-ebe4-4c8b-e8f9-b47921b113b8"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-d018eb43-2d39-485d-ae99-7cd37676d34c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","      <th>AgeBucket</th>\n","      <th>RelativesOnboard</th>\n","      <th>Family</th>\n","      <th>Single</th>\n","      <th>Small</th>\n","      <th>Medium</th>\n","      <th>Large</th>\n","      <th>Title</th>\n","      <th>Senior</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>892</td>\n","      <td>3</td>\n","      <td>Kelly, Mr. James</td>\n","      <td>male</td>\n","      <td>34.5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>330911</td>\n","      <td>7.8292</td>\n","      <td>U</td>\n","      <td>Q</td>\n","      <td>30.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Mr</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>893</td>\n","      <td>3</td>\n","      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n","      <td>female</td>\n","      <td>47.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>363272</td>\n","      <td>7.0000</td>\n","      <td>U</td>\n","      <td>S</td>\n","      <td>45.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Mrs</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>894</td>\n","      <td>2</td>\n","      <td>Myles, Mr. Thomas Francis</td>\n","      <td>male</td>\n","      <td>62.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>240276</td>\n","      <td>9.6875</td>\n","      <td>U</td>\n","      <td>Q</td>\n","      <td>60.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Mr</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>895</td>\n","      <td>3</td>\n","      <td>Wirz, Mr. Albert</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>315154</td>\n","      <td>8.6625</td>\n","      <td>U</td>\n","      <td>S</td>\n","      <td>15.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Mr</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>896</td>\n","      <td>3</td>\n","      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n","      <td>female</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3101298</td>\n","      <td>12.2875</td>\n","      <td>U</td>\n","      <td>S</td>\n","      <td>15.0</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Mrs</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>413</th>\n","      <td>1305</td>\n","      <td>3</td>\n","      <td>Spector, Mr. Woolf</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>A.5. 3236</td>\n","      <td>8.0500</td>\n","      <td>U</td>\n","      <td>S</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Mr</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>414</th>\n","      <td>1306</td>\n","      <td>1</td>\n","      <td>Oliva y Ocana, Dona. Fermina</td>\n","      <td>female</td>\n","      <td>39.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>PC 17758</td>\n","      <td>108.9000</td>\n","      <td>C</td>\n","      <td>C</td>\n","      <td>30.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Mrs</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>415</th>\n","      <td>1307</td>\n","      <td>3</td>\n","      <td>Saether, Mr. Simon Sivertsen</td>\n","      <td>male</td>\n","      <td>38.5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>SOTON/O.Q. 3101262</td>\n","      <td>7.2500</td>\n","      <td>U</td>\n","      <td>S</td>\n","      <td>30.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Mr</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>416</th>\n","      <td>1308</td>\n","      <td>3</td>\n","      <td>Ware, Mr. Frederick</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>359309</td>\n","      <td>8.0500</td>\n","      <td>U</td>\n","      <td>S</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Mr</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>417</th>\n","      <td>1309</td>\n","      <td>3</td>\n","      <td>Peter, Master. Michael J</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2668</td>\n","      <td>22.3583</td>\n","      <td>U</td>\n","      <td>C</td>\n","      <td>NaN</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Master</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>418 rows × 20 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d018eb43-2d39-485d-ae99-7cd37676d34c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d018eb43-2d39-485d-ae99-7cd37676d34c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d018eb43-2d39-485d-ae99-7cd37676d34c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["     PassengerId  Pclass  ...   Title Senior\n","0            892       3  ...      Mr      0\n","1            893       3  ...     Mrs      0\n","2            894       2  ...      Mr      0\n","3            895       3  ...      Mr      0\n","4            896       3  ...     Mrs      0\n","..           ...     ...  ...     ...    ...\n","413         1305       3  ...      Mr      0\n","414         1306       1  ...     Mrs      0\n","415         1307       3  ...      Mr      0\n","416         1308       3  ...      Mr      0\n","417         1309       3  ...  Master      0\n","\n","[418 rows x 20 columns]"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"Lx1o4vTMReY2"},"source":[""]},{"cell_type":"markdown","source":["### **Preprocessing Pipeline**"],"metadata":{"id":"ItgUVvklUZLF"}},{"cell_type":"markdown","metadata":{"id":"YJ8HMc8YReY2"},"source":["Now let's build our preprocessing pipelines, starting with the pipeline for numerical attributes:"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"lL0rNiI9ReY2","executionInfo":{"status":"ok","timestamp":1644929523494,"user_tz":300,"elapsed":9,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[],"source":["from sklearn.pipeline import Pipeline\n","from sklearn.impute import SimpleImputer\n","from sklearn.preprocessing import StandardScaler\n","\n","num_pipeline = Pipeline([\n","        (\"imputer\", SimpleImputer(strategy=\"median\")),\n","        (\"scaler\", StandardScaler())\n","    ])"]},{"cell_type":"markdown","metadata":{"id":"u9BZB8tpReY2"},"source":["Now we can build the pipeline for the categorical attributes:"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"emLTmHQWReY2","executionInfo":{"status":"ok","timestamp":1644929523837,"user_tz":300,"elapsed":352,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[],"source":["from sklearn.preprocessing import OneHotEncoder"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"06-v9DfVReY2","executionInfo":{"status":"ok","timestamp":1644929523838,"user_tz":300,"elapsed":9,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[],"source":["cat_pipeline = Pipeline([\n","        (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n","        (\"cat_encoder\", OneHotEncoder(sparse=False)),\n","    ])"]},{"cell_type":"markdown","metadata":{"id":"9P3fERhnReY2"},"source":["Finally, let's join the numerical and categorical pipelines:"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"nUYYJxEUReY2","executionInfo":{"status":"ok","timestamp":1644929523838,"user_tz":300,"elapsed":7,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[],"source":["from sklearn.compose import ColumnTransformer\n","\n","num_attribs = [\"Age\", \"SibSp\", \"Parch\", \"Fare\",  \"Single\",\"Small\", \"Medium\", \"Large\"]\n","cat_attribs = [\"Pclass\", \"Sex\", \"Embarked\", \"Cabin\", \"Title\"]\n","\n","preprocess_pipeline = ColumnTransformer([\n","        (\"num\", num_pipeline, num_attribs),\n","        (\"cat\", cat_pipeline, cat_attribs),\n","    ])"]},{"cell_type":"markdown","metadata":{"id":"CV-7R_x3ReY3"},"source":["Cool! Now we have a nice preprocessing pipeline that takes the raw data and outputs numerical input features that we can feed to any Machine Learning model we want."]},{"cell_type":"code","execution_count":26,"metadata":{"id":"LLdXfPgcReY3","outputId":"318ed1ba-bd4c-46a1-cd6e-4533440e1c4d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644929523838,"user_tz":300,"elapsed":6,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.56573582,  0.43279337, -0.47367361, ...,  0.        ,\n","         1.        ,  0.        ],\n","       [ 0.6638609 ,  0.43279337, -0.47367361, ...,  0.        ,\n","         0.        ,  1.        ],\n","       [-0.25833664, -0.4745452 , -0.47367361, ...,  1.        ,\n","         0.        ,  0.        ],\n","       ...,\n","       [-0.10463705,  0.43279337,  2.00893337, ...,  1.        ,\n","         0.        ,  0.        ],\n","       [-0.25833664, -0.4745452 , -0.47367361, ...,  0.        ,\n","         1.        ,  0.        ],\n","       [ 0.20276213, -0.4745452 , -0.47367361, ...,  0.        ,\n","         1.        ,  0.        ]])"]},"metadata":{},"execution_count":26}],"source":["X_train = preprocess_pipeline.fit_transform(\n","    train_data[num_attribs + cat_attribs])\n","X_train"]},{"cell_type":"markdown","metadata":{"id":"bDMIF8OCReY3"},"source":["Let's not forget to get the labels:"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"i5C4YS6XReY3","executionInfo":{"status":"ok","timestamp":1644929523838,"user_tz":300,"elapsed":5,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[],"source":["y_train = train_data[\"Survived\"]"]},{"cell_type":"markdown","metadata":{"id":"niHc5ZtkReY3"},"source":["We are now ready to train a clustering. Let's start with a `Kmeans`:"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"gRqPO1PcReY3","executionInfo":{"status":"ok","timestamp":1644929523838,"user_tz":300,"elapsed":4,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"outputs":[],"source":["X_test = preprocess_pipeline.transform(test_data[num_attribs + cat_attribs])"]},{"cell_type":"code","source":["from sklearn.cluster import KMeans\n","kmeans = KMeans(n_clusters=2, max_iter=500, algorithm='auto', random_state=1)\n","kmeans.fit(X_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VdtdEuny_3xO","executionInfo":{"status":"ok","timestamp":1644929524223,"user_tz":300,"elapsed":389,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}},"outputId":"bb9a3a6c-3d08-43a3-a1b1-d5f4b254e4ec"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KMeans(max_iter=500, n_clusters=2, random_state=1)"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["correct = 0\n","prediction = kmeans.predict(X_train)\n","pred_df = pd.DataFrame({'actual': y_train, \"prediction\" : prediction})\n","print(pred_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cYWGnmwVAz83","executionInfo":{"status":"ok","timestamp":1644929524224,"user_tz":300,"elapsed":34,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}},"outputId":"c7839990-caad-4085-a320-c7eb034932a8"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["     actual  prediction\n","0         0           1\n","1         1           1\n","2         1           0\n","3         1           1\n","4         0           0\n","..      ...         ...\n","886       0           0\n","887       1           0\n","888       0           1\n","889       1           0\n","890       0           0\n","\n","[891 rows x 2 columns]\n"]}]},{"cell_type":"code","source":["y_train = y_train.to_numpy()"],"metadata":{"id":"ymlCSfAoCQDK","executionInfo":{"status":"ok","timestamp":1644929524224,"user_tz":300,"elapsed":26,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["prediction"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QLIbKoRACT5s","executionInfo":{"status":"ok","timestamp":1644929524224,"user_tz":300,"elapsed":26,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}},"outputId":"d5511f96-1ecc-4bfb-e87e-a460c2722b79"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0,\n","       0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1,\n","       0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1,\n","       0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0,\n","       1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,\n","       0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0,\n","       1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1,\n","       0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1,\n","       1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1,\n","       0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0,\n","       0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1,\n","       0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0,\n","       0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1,\n","       1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1,\n","       1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,\n","       1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0,\n","       1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0,\n","       0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1,\n","       0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0,\n","       1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0,\n","       1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1,\n","       1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n","       0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,\n","       1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n","       0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1,\n","       1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1,\n","       1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,\n","       1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,\n","       1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,\n","       0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,\n","       1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0,\n","       1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0,\n","       1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0,\n","       0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0,\n","       1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,\n","       0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,\n","       1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1,\n","       1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0], dtype=int32)"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["prediction.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uGXv3l8OCfCu","executionInfo":{"status":"ok","timestamp":1644929524224,"user_tz":300,"elapsed":21,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}},"outputId":"4b9e61c9-fec0-4105-d7c7-869bf4a72c77"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(891,)"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["y_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3B2xH_LsCifH","executionInfo":{"status":"ok","timestamp":1644929524224,"user_tz":300,"elapsed":16,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}},"outputId":"2a394c41-2463-44dd-a30e-f585c863cf13"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(891,)"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["y_train[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sAqs54vyCzuL","executionInfo":{"status":"ok","timestamp":1644929524224,"user_tz":300,"elapsed":12,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}},"outputId":"88d32a97-f426-43de-e2b8-21c5cf88c290"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["prediction[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YSIacFu4DAwX","executionInfo":{"status":"ok","timestamp":1644929524224,"user_tz":300,"elapsed":9,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}},"outputId":"a6186871-dc22-4b36-9370-3c7c6e94fc5c"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["for i in range(len(y_train)):\n","  if prediction[i] == y_train[i]:\n","    correct += 1\n","\n","print(correct/len(y_train))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w0j-y6vUB8qE","executionInfo":{"status":"ok","timestamp":1644929524225,"user_tz":300,"elapsed":7,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}},"outputId":"97c041e8-117c-4b0c-f298-606179445a31"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["0.622895622895623\n"]}]},{"cell_type":"markdown","metadata":{"id":"Ex6okP_qReY3"},"source":["And now we could just build a CSV file with these predictions (respecting the format excepted by Kaggle), then upload it and hope for the best. But wait! We can do better than hope. Why don't we use cross-validation to have an idea of how good our model is?"]},{"cell_type":"code","source":["y_pred = kmeans.predict(X_test)"],"metadata":{"id":"yTS3VSwifcy_","executionInfo":{"status":"ok","timestamp":1644929524225,"user_tz":300,"elapsed":4,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["#another way to create submission file\n","submission = pd.DataFrame({'PassengerId':test_data['PassengerId'],'Survived':y_pred})\n","submission\n","filename = 'Titanic_Predictions.csv'\n","submission.to_csv(filename, index=False)\n","print('Saved')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sTiRtpcnhybi","executionInfo":{"status":"ok","timestamp":1644929524679,"user_tz":300,"elapsed":457,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}},"outputId":"86e96d1f-c013-4d42-91e4-086320f644c1"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Saved\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"q6ZPOVkbliUl","executionInfo":{"status":"ok","timestamp":1644929524680,"user_tz":300,"elapsed":13,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"execution_count":39,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8NMmVZEAReY3"},"source":["Okay, not too bad! Looking at the [leaderboard](https://www.kaggle.com/c/titanic/leaderboard) for the Titanic competition on Kaggle, you can see that our score is in the top 2%, woohoo! Some Kagglers reached 100% accuracy, but since you can easily find the [list of victims](https://www.encyclopedia-titanica.org/titanic-victims/) of the Titanic, it seems likely that there was little Machine Learning involved in their performance! 😆"]},{"cell_type":"markdown","source":["### **Another Approach to Clustering**"],"metadata":{"id":"iSBxRFwjjxyr"}},{"cell_type":"code","source":["from sklearn.metrics import silhouette_score\n","from sklearn.cluster import KMeans\n","def cluster(x,clusters):\n","    \n","    x=x\n","    allscore = []\n","    allclusters = []\n","    sum_of_squared_distances = []\n","    \n","    for i in np.arange(1,clusters):\n","        \n","        i+=1\n","        model=KMeans(n_clusters=i)\n","        pred=model.fit_predict(x)\n","        s_score=silhouette_score(x,pred)\n","        print('Number of cluster: {} , Score: {}'.format(i,s_score))\n","        allscore.append(s_score)\n","        allclusters.append(i)\n","        sum_of_squared_distances.append(model.inertia_)\n","        \n","    plt.figure(figsize=(10,10))\n","    plt.plot(allclusters,sum_of_squared_distances,marker='x',c='r');"],"metadata":{"id":"-INQbpt-j2K6","executionInfo":{"status":"ok","timestamp":1644929524680,"user_tz":300,"elapsed":11,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["cluster(X_test,10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":748},"id":"e4quidpQkHp5","executionInfo":{"status":"ok","timestamp":1644929527844,"user_tz":300,"elapsed":3175,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}},"outputId":"995cb5b4-cf7c-42cf-f25a-fe0c0b00dc1b"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of cluster: 2 , Score: 0.35708140422369644\n","Number of cluster: 3 , Score: 0.3744671309371705\n","Number of cluster: 4 , Score: 0.38637666364809603\n","Number of cluster: 5 , Score: 0.38560702247725404\n","Number of cluster: 6 , Score: 0.3536185116932548\n","Number of cluster: 7 , Score: 0.2849414053065887\n","Number of cluster: 8 , Score: 0.30066187361864655\n","Number of cluster: 9 , Score: 0.29776196929509163\n","Number of cluster: 10 , Score: 0.3066006783013449\n"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 720x720 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model=KMeans(n_clusters=4)\n","pred=model.fit_predict(X_test)\n","silhouette_score(X_test,pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c-uNkC2jkgoq","executionInfo":{"status":"ok","timestamp":1644929685890,"user_tz":300,"elapsed":427,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}},"outputId":"eab65152-c715-4504-81f0-73797535a1b7"},"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.3874419431817034"]},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":[""],"metadata":{"id":"uRc-Jsp3khLV","executionInfo":{"status":"aborted","timestamp":1644929528189,"user_tz":300,"elapsed":353,"user":{"displayName":"Applied AI Lab","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16870436914878563067"}}},"execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.12"},"nav_menu":{},"toc":{"navigate_menu":true,"number_sections":true,"sideBar":true,"threshold":6,"toc_cell":false,"toc_section_display":"block","toc_window_display":false},"colab":{"name":"Titanic Clustering","provenance":[{"file_id":"1zfVCErjbzdzrQmFi_1p9uuy000e8O4Xr","timestamp":1644871498068},{"file_id":"https://github.com/ageron/handson-ml2/blob/master/03_classification.ipynb","timestamp":1644758973765}]}},"nbformat":4,"nbformat_minor":0}